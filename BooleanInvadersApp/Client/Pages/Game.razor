﻿@using BooleanInvadersApp.Client.Entities
@using BooleanInvadersApp.Client.Enums
@page "/BooleanInvaders"

<select @bind="currentDifficulty" @bind:event="onchange">
    <option value="Easy">Easy</option>
    <option value="Medium">Medium</option>
    <option value="Hard">Hard</option>
</select>

<div class="game-container" @onkeydown="HandleKeyDown" tabindex="0">
    <div class="score">Score: @score</div>
    <div class="player" style="left: @(player.X + "px"); top: @(player.Y + "px");"></div>

    @foreach (var alien in aliens)
    {
        <div class="alien" style="left: @((int)alien.X + "px"); top: @((int)alien.Y + "px");"></div>
    }

    @foreach (var bullet in bullets)
    {
        <div class="bullet" style="left: @(bullet.X + "px"); top: @(bullet.Y + "px");"></div>
    }

    @if (isGameOver)
    {
        <div class="game-over">Game Over</div>
        <button @onclick="RestartGame">Restart</button>
    }
</div>

@code {
    private Timer gameTimer;
    private PlayerShip player;
    private List<Alien> aliens;
    private List<PlayerBullet> bullets;
    private bool isGameOver = false;
    private List<PlayerBullet> bulletsToRemove = new List<PlayerBullet>();
    private int score = 0;
    private bool moveDown = false;
    private double baseMoveSpeed = 0.1; // base speed
    private double moveSpeedIncrement = 0.1; // speed increase per level
    private DifficultyLevel _currentDifficulty = DifficultyLevel.Easy; // default easy

    public DifficultyLevel currentDifficulty
    {
        get => _currentDifficulty;
        set
        {
            _currentDifficulty = value;
            AdjustMoveSpeedForDifficulty();
        }
    }
    private int level = 1; // to start at level 1

    protected override void OnInitialized()
    {
        AdjustMoveSpeedForDifficulty();
        InitializeGame();
        gameTimer = new Timer(GameUpdate, null, 0, 16); // 60 FPS
    }

    private void AdjustMoveSpeedForDifficulty() // for different difficulty levels
    {
        switch (currentDifficulty)
        {
            case DifficultyLevel.Easy:
                baseMoveSpeed = 0.05;
                break;
            case DifficultyLevel.Medium:
                baseMoveSpeed = 0.1; 
                break;
            case DifficultyLevel.Hard:
                baseMoveSpeed = 0.2; 
                break;
        }
    }

    private void InitializeGame()
    {
        player = new PlayerShip { X = 400, Y = 550 }; // starting position
        aliens = new List<Alien>();
        bullets = new List<PlayerBullet>();

        // to initialize aliens in a grid
        int startingX = 180;
        int startingY = 50;
        for (int row = 0; row < 5; row++) // 5 rows of aliens
        {
            for (int col = 0; col < 10; col++) // 10 columns
            {
                aliens.Add(new Alien { X = startingX + col * 60, Y = startingY + row * 40, MovingRight = true });
            }
        }
    }

    private void FireBullet()
    {
        if (!bullets.Any()) // so it only fires if there's not a bullet on screen
        {
            var bullet = new PlayerBullet
                {
                    X = player.X + 22,  // to center the bullet relative to the player
                    Y = player.Y
                };
            bullets.Add(bullet);
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        const int moveDistance = 20;

        switch (e.Key)
        {
            case "ArrowLeft":
                player.X = Math.Max(player.X - moveDistance, 0);  // not going out of the bound with this
                break;
            case "ArrowRight":
                player.X = Math.Min(player.X + moveDistance, 750);  // for now 800px width and 50px player width ----> need to correct later
                break;
            case " ":
                FireBullet();
                break;
        }
    }

    private void GameUpdate(object state)
    {
        // Move bullets
        foreach (var bullet in bullets)
        {
            bullet.Y -= 20;  // we can adjust speed as needed
        }

        // Collision detection
        foreach (var bullet in bullets)
        {
            var hitAlien = aliens.FirstOrDefault(a =>
                bullet.X > a.X && bullet.X < a.X + 40 &&
                bullet.Y > a.Y && bullet.Y < a.Y + 40);

            if (hitAlien != null)
            {
                // differentiate score based on alien row -> TODO
                int alienRowIndex = aliens.IndexOf(hitAlien) / 10; //  10 columns
                if (alienRowIndex == 0)
                    score += 30;
                else if (alienRowIndex >= 1 && alienRowIndex <= 3)
                    score += 20;
                else
                    score += 10;

                aliens.Remove(hitAlien);
                bulletsToRemove.Add(bullet);
            }
        }

        // we need to remove bullets that are out of bounds or have hit an alien
        bullets.RemoveAll(b => b.Y < 0 || bulletsToRemove.Contains(b));
        bulletsToRemove.Clear();

        // and check if any alien has hit the left or right edge
        bool hitLeftEdge = aliens.Any(a => a.X <= 0);
        bool hitRightEdge = aliens.Any(a => a.X >= 760); // 800 - 40 (alien width)

        if (hitLeftEdge || hitRightEdge)
        {
            // then move all aliens down one row
            foreach (var alien in aliens)
            {
                alien.Y += 40; // and move down by 40px (alien height)
            }

            // last reverse direction for all aliens
            foreach (var alien in aliens)
            {
                alien.MovingRight = !alien.MovingRight;
            }
        }

        // the regular left-right movement
        double moveSpeed = baseMoveSpeed + (level - 1) * moveSpeedIncrement; // ----TODO
        foreach (var alien in aliens)
        {
            alien.X += alien.MovingRight ? moveSpeed : -moveSpeed;
        }

        if (aliens.Any(a => a.Y + 40 >= 550) ||  // Alien reached the bottom
            aliens.Any(a => a.X >= player.X && a.X <= player.X + 50 && a.Y >= player.Y && a.Y <= player.Y + 20))  // an alien collided with player
        {
            isGameOver = true;
            gameTimer.Dispose();  // then top the game timer
        }

        // and last if all aliens are destroyed, reset the game with a new wave
        if (!aliens.Any())
        {
            level++; // increase the level
            InitializeGame();
        }

        StateHasChanged();  // finally request a re-render
    }

    private void RestartGame()
    {
        isGameOver = false;
        score = 0;
        bullets.Clear();
        level = 1; // reset the level
        InitializeGame();
        gameTimer = new Timer(GameUpdate, null, 0, 16); // and restart the game timer
    }
}